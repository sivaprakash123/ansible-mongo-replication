---
- name: Tempalate for mongorep
  copy:
    src: mongo.repo.j2
    dest: /etc/yum.repos.d/mongo.repo

- name: Install mongodb-org package
  yum:
   name: mongodb-org
   state: present

- name: Start the service
  service:
    name: mongod
    state: started

- name: "Update Hostnames"
  hostname:
    name: "{{ new_hostname }}"

#- name: 'Add hostname to /etc/hosts'
#  lineinfile:
#    path: /etc/hosts
#    regexp: '^127\.0\.0\.1[ \t]+localhost'
#    line: '127.0.0.1 localhost {{ new_hostname }}'
#    state: present

- name: Copy the mongo configuration file
  copy:
    src: mongod.conf.j2
    dest: /etc/mongod.conf

- name: Restart the service
  service:
    name: mongod
    state: restarted

- name: Create the file to initiate the replica set
  template: src=repset_init.j2 dest=/tmp/repset_init.js

- name: Call out and initiate the replication set, just in case it hasn't already
  shell: /usr/bin/mongo --host {{ groups["mongod_primary"][0] }}:{{ hostvars[groups["mongod_primary"][0]]["mongod_port"] }} /tmp/repset_init.js
  args:
    creates: initiateReplicaset

- name: Create the file to add the current node to the replica set
  template: src=repset_add.j2 dest=/tmp/repset_add.js

- name: Add the current node to the replication set
  shell: /usr/bin/mongo --host {{ groups["mongod_primary"][0] }}:{{ hostvars[groups["mongod_primary"][0]]["mongod_port"] }} /tmp/repset_add.js
  args:
    creates: addNodeToReplicaset
































- name: Create zookeeper group
  group:
    name: '{{ zookeeper_group }}'
    state: present
  tags:
    - zookeeper_user

- name: Create zookeeper user
  user:
    name: '{{ zookeeper_user }}'
    group: '{{ zookeeper_group }}'
    state: present
    createhome: no
  tags:
    - zookeeper_group

- name: Check if ZooKeeper has already been downloaded and unpacked
  stat:
    path: '{{ zookeeper_install_dir }}'
  register: dir

- name: Download Apache ZooKeeper
  get_url:
    url: '{{ zookeeper_mirror }}/{{ zookeeper_package }}'
    dest: /tmp
  when: not dir.stat.exists
  tags:
    - zookeeper_download

- name: Create ZooKeeper installation dir {{ zookeeper_install_dir }}
  file:
    path: '{{ zookeeper_install_dir }}'
    state: directory
    group: '{{ zookeeper_group }}'
    owner: '{{ zookeeper_user }}'
  when: not dir.stat.exists
  tags:
    - zookeeper_dirs

- name: Unpack Apache ZooKeeper
  unarchive:
    src: /tmp/{{ zookeeper_package }}
    dest: '{{ zookeeper_install_dir }}'
    copy: no
    extra_opts: [--strip-components=1]
    group: '{{ zookeeper_group }}'
    owner: '{{ zookeeper_user }}'
  when: not dir.stat.exists
  tags:
    - zookeeper_unpack

- name: Create symlink to ZooKeeper installation
  file:
    src: '{{ zookeeper_install_dir }}'
    dest: '{{ zookeeper_dir }}'
    state: link
    group: '{{ zookeeper_group }}'
    owner: '{{ zookeeper_user }}'
  tags:
    - zookeeper_dirs

- name: Create directory for snapshot files and myid file
  file:
    path: '{{ zookeeper_data_dir }}'
    state: directory
    group: '{{ zookeeper_group }}'
    owner: '{{ zookeeper_user }}'
  tags:
    - zookeeper_dirs

- name: Create directory for transaction log files
  file:
    path: '{{ zookeeper_data_log_dir }}'
    state: directory
    group: '{{ zookeeper_group }}'
    owner: '{{ zookeeper_user }}'
  tags:
    - zookeeper_dirs

- name: Create zookeeper log directory
  file:
    path: '{{ zookeeper_log_dir }}'
    state: directory
    group: '{{ zookeeper_group }}'
    owner: '{{ zookeeper_user }}'
  tags:
    - zookeeper_dirs

# /usr/share/zookeeper/conf/zoo.cfg is the default file ZooKeeper will use when starting
- name: Template configuration file to zoo.cfg
  template:
    src: zoo.cfg.j2
    dest: '{{ zookeeper_dir }}/conf/zoo.cfg'
  notify:
    - Restart ZooKeeper service
  tags:
    - zookeeper_config

- name: Create directory for symlink to ZooKeeper configuration file
  file:
    path: /etc/zookeeper
    state: directory
    group: '{{ zookeeper_group }}'
    owner: '{{ zookeeper_user }}'
  tags:
    - zookeeper_config

- name: Create symlink to ZooKeeper configuration file
  file:
    src: '{{ zookeeper_dir }}/conf/zoo_sample.cfg'
    dest: /etc/zookeeper/zoo.cfg
    state: link
    group: '{{ zookeeper_group }}'
    owner: '{{ zookeeper_user }}'
  tags:
    - zookeeper_config

- name: Template myid to {{ zookeeper_data_dir }}/myid
  template:
    src: myid.j2
    dest: '{{ zookeeper_data_dir }}/myid'
  notify:
    - Restart ZooKeeper service
  tags:
    - zookeeper_config

- name: Template /etc/default
  template:
    src: default.j2
    dest: '/etc/default/zookeeper'
  notify:
    - Restart ZooKeeper service
  tags:
    - zookeeper_config

# Uncomment the log4j.properties line for setting the maximum number of logs to rollover and keep
- name: Set maximum log rollover history
  replace:
    dest: '{{ zookeeper_dir }}/conf/log4j.properties'
    regexp: '^#log4j.appender.ROLLINGFILE.MaxBackupIndex'
    replace: 'log4j.appender.ROLLINGFILE.MaxBackupIndex'
  notify:
    - Restart ZooKeeper service
  tags:
    - zookeeper_config

- name: Template ZooKeeper systemd service file
  template:
    src: zookeeper.service.j2
    dest: /usr/lib/systemd/system/zookeeper.service
  notify:
    - Restart ZooKeeper service
  tags:
    - zookeeper_service

- name: Start the ZooKeeper service
  systemd:
    name: zookeeper.service
    state: started
    enabled: yes
  tags:
    - zookeeper_service

# Cleanup install by deleting downloaded ZooKeeper archive
- name: Delete /tmp/{{ zookeeper_package }} file
  file:
    path: /tmp/{{ zookeeper_package }}
    state: absent
  tags:
    - zookeeper_cleanup

# Set Ansible fact that ZooKeeper has completed installation. This is so that this role can be used in
# other dependent roles. Those roles can check for this fact to determine whether or not this role
# should be run. Failing to do so will mean that this role is executed even if it has already been run.
- name: Set fact zookeeper_installed
  set_fact:
    zookeeper_installed: true
  tags:
    - zookeeper_install_fact
